#!/usr/local/bin/python3
import click
import datetime as dt
import json
import requests
import bcrypt
import dateutil.parser
import inflect
import os
import sys
import inflect
from dateutil import tz

baseurl = "https://calliapp.dev/api"

token = None

@click.group()
def main():
    pass

@main.command()
@click.option('--event', '-e', default=False, is_flag=True)
@click.option('--remind', '-r', default=False, is_flag=True)
def next(event, remind):
    today_start = dt.datetime.now().strftime('%s')
    url = baseurl + "/events" + "?start=" + today_start
    events_today = requests.get(url, headers={'token': token})
    try:
        for i in json.loads(events_today.text):
            if not event and not remind:
                pretty(json.dumps([i]), "next")
                break
            elif event and not remind:
                if i['type'] == "E":
                    pretty(json.dumps([i]), "next")
                    break
                else: continue
            elif remind and not event:
                if i['type'] == "R":
                    pretty(json.dumps([i]), "next")
                    break
                else: continue
            else:
                click.echo(click.style('please provide either an events or reminders flag, or neither', fg='yellow', bold=True))
                break
    except TypeError:
        click.echo(click.style('no events were found', fg='red', bold=True))

@main.command()
@click.option('--start', '-s', nargs=1, default=dt.datetime.now().strftime("%c"), prompt="search from")
@click.option('--end', '-e', nargs=1, default=False, prompt=False)
def search(start, end):
    try:
        start = dateutil.parser.parse(start, dayfirst=True)
    except ValueError:
        click.echo(click.style('please enter a time to search from', fg='yellow'))
    url = baseurl + "/events" + "?start=" + start.strftime("%s")
    if end:
        try:
            end = dateutil.parser.parse(end, dayfirst=True)
        except ValueError:
            click.echo(click.style('please enter a valid time to search to, or leave it blank', fg='yellow'))
        url = url + "?end=" + end.strftim("%s")
    search_results = requests.get(url, headers={'token': token})
    pretty(search_results.text, "in search")




@main.command()
def today():
    today_start = dt.datetime.now().strftime('%s')
    today_end = dt.datetime.combine((dt.datetime.today() + dt.timedelta(days=1)), dt.time(0)).strftime('%s')
    url = baseurl + "/events" + "?start=" + today_start + "&end=" + str(int(today_end)-1)
    events_today = requests.get(url, headers={'token': token})
    pretty(events_today.text, "today")

@main.command()
def tomorrow():
    tomorrow_start = dt.datetime.combine((dt.datetime.today() + dt.timedelta(days=1)), dt.time(0)).strftime('%s')
    tomorrow_end = dt.datetime.combine((dt.datetime.today() + dt.timedelta(days=2)), dt.time(0)).strftime('%s')
    url = baseurl + "/events" + "?start=" + tomorrow_start + "&end=" + tomorrow_end
    events_today = requests.get(url, headers={'token': token})
    pretty(events_today.text, "tomorrow")

@main.command()
def week():
    week_start = dt.datetime.now().strftime('%s')
    week_end = dt.datetime.combine((dt.datetime.today() + dt.timedelta(days=7)), dt.time(0)).strftime('%s')
    url = baseurl + "/events" + "?start=" + week_start + "&end=" + week_end
    events_today = requests.get(url, headers={'token': token})
    pretty(events_today.text, "this week")

@main.command()
@click.option("--username", "-u", prompt="username")
@click.option("--password", "-p", prompt="password", hide_input=True)
def login(username, password):
    url = baseurl + "/login"
    credentials = {}
    credentials["username"] = username
    credentials["hash"] = (bcrypt.hashpw(password.encode(), bcrypt.gensalt(5))).decode()
    credentials["password"] = password
    pending = requests.post(url, json=json.loads(json.dumps(credentials)))
    if pending.status_code == 200:
        token_file = open(".token.json", "w")
        token_file.write(json.loads(pending.text))
        token_file.close()
        click.echo(click.style('successfully logged in.', fg='green'))
        click.echo(click.style('do not share your token stored in .token.json', fg='red', bold=True))
    else:
        click.echo(click.style('login failed. please try again,', fg='yellow', bold=True))

@main.command()
@click.argument("event_name", nargs=-1)
@click.option("--day", "-d", default=dt.date.today().strftime("%d/%m/%Y"), show_default=False, prompt="date", help="Date of the event")
@click.option("--start", "-t", default=dt.time(12).strftime("%-I:%M%p"), prompt="start time", help="Start time of the event", show_default=False)
@click.option("--duration", "-l", default='60', prompt="duration (minutes)", help="Duration of the event", show_default=False)
@click.option("--info", "-i", default='', prompt="information (optional)", help="Event Location", show_default=False)
def event(event_name, day, start, duration, info):
    url = baseurl + "/events"
    event_d = {"name": " ".join(event_name)}
    try:
        date = dateutil.parser.parse(day, dayfirst=True)
    except ValueError:
        click.echo(click.style('please enter a valid date', fg='red'))
    try:
        time = dateutil.parser.parse(start, dayfirst=True)
    except ValueError:
        click.echo(click.style('please enter a valid start time', fg='red'))
    start = dt.datetime.combine(date.date(), time.time())
    try:
        end = start + dt.timedelta(minutes=int(duration))
    except ValueError:
        click.echo(click.style('please enter an integer number of minutes', fg='red'))
    event_d['start'] = start.strftime("%s")
    event_d['end'] = end.strftime("%s")
    event_d['info'] = info
    event_d['type'] = 'E'
    pending = requests.post(url, json=json.loads(json.dumps(event_d)), headers={'token': token})
    if pending.status_code == 200:
        click.echo(f"-> event {json.loads(pending.text)['eventhex'].lower()} created")
    else:
        click.echo(click.style('event creation failed', fg='red'))
        click.echo(click.style('please check your network connection and retry', fg='yellow'))

@main.command()
@click.argument("remind_name", nargs=-1)
@click.option("--day", "-d", default=dt.date.today().strftime("%d/%m/%Y"), show_default=False, prompt="date", help="Date of the event")
@click.option("--start", "-t", default=dt.time(12).strftime("%-I:%M%p"), prompt="start time", help="Start time of the event", show_default=False)
@click.option("--info", "-i", default='', prompt="information (optional)", help="Event Location", show_default=False)
def remind(remind_name, day, start, info):
    url = baseurl + "/events"
    event_d = {"name": " ".join(remind_name)}
    try:
        date = dateutil.parser.parse(day, dayfirst=True)
    except ValueError:
        click.echo(click.style('please enter a valid date', fg='red'))
    try:
        time = dateutil.parser.parse(start, dayfirst=True)
    except ValueError:
        click.echo(click.style('please enter a valid start time', fg='red'))
    start = dt.datetime.combine(date.date(), time.time())
    event_d['start'] = start.strftime("%s")
    event_d['info'] = info
    event_d['type'] = 'R'
    pending = requests.post(url, json=json.loads(json.dumps(event_d)), headers={'token': token})
    if pending.status_code == 200:
        click.echo(f"-> reminder {json.loads(pending.text)['eventhex'].lower()} created")
    else:
        click.echo(click.style('reminder creation failed', fg='red'))
        click.echo(click.style('please check your network connection and retry', fg='yellow'))

@main.command()
@click.argument("event-hex", nargs=-1)
def delete(event_hex):
    url = baseurl + "/events"
    delete_a = []
    delete_d = {}
    for i in event_hex:
        if i[0] == "@" and len(i) == 7:
            delete_a.append(i)
        elif len(i) == 6:
            delete_a.append("@"+i)
        else:
            click.echo(click.style(f'{i} is not a recognised event hex', fg='red'))
            continue
    delete_d['hex'] = delete_a
    pending = requests.delete(url, json=json.loads(json.dumps(delete_d)), headers={'token': token})
    if pending.status_code == 204:
        p = inflect.engine()
        click.echo(f"{p.no('event', len(delete_a))} events successfully deleted")
    else:
        click.echo(click.style('deletion failed', fg='red'))
        click.echo(click.style('please check that the events are valid', fg='yellow'))

@main.command()
@click.argument("event-hex", nargs=1)
@click.option("--day", "-d", default="", show_default=False, prompt="date", help="Date of the event")
@click.option("--start", "-t", default="", prompt="start time", help="Start time of the event", show_default=False)
@click.option("--duration", "-l", default="", prompt="duration (minutes)", help="Duration of the event", show_default=False)
@click.option("--info", "-i", default="", prompt="information (optional)", help="Event Location", show_default=False)
def edit(event_hex, day, start, duration, info):
    event_s = ""
    if event_hex[0] == "@" and len(event_hex) == 7:
        event_s = event_hex[1::]
    elif len(event_hex) == 6:
        event_s = event_hex
    else:
        click.echo(click.style(f'{event_hex} is not a recognised event hex', fg='red'))
    url = baseurl + "/events" + "?eventhex=" + event_s
    existing = requests.get(url, headers={'token': token})
    existing_d = json.loads(existing.text)[0]
    existing_date = dt.datetime.utcfromtimestamp(int(existing_d['start'])).date()
    existing_time = dt.datetime.utcfromtimestamp(int(existing_d['start'])).time()
    if existing_d['end'] != 0:
        existing_duration = (int(existing_d['end']) - int(existing_d['start'])) / 60
    existing_info = existing_d['info']
    if day:
        try:
            new_date = dateutil.parser.parse(day, dayfirst=True).date()
        except ValueError:
            click.echo(click.style('please enter a valid date', fg='red'))
    else:
        new_date = existing_date
    if start:
        try:
            new_time = dateutil.parser.parse(start, dayfirst=True).time()
        except ValueError:
            click.echo(click.style('please enter a valid start time', fg='red'))
    else:
        new_time = existing_time
    new_start = dt.datetime.combine(new_date, new_time)
    if existing_d['type'] == "E":
        if duration:
            try:
                new_end = new_start + dt.timedelta(minutes=int(duration))
            except TypeError:
                click.echo(click.style('please enter a valid number of minutes for event duration', fg='red'))
        else:
            new_end = new_start + dt.timedelta(minutes=int(existing_duration))
    else:
        new_end = "0"
    if info:
        new_info = info
    else:
        new_info = existing_info
    new_d = {}
    new_d['start'] = new_start.strftime("%s")
    if new_end != "0":
        new_d['end'] = new_end.strftime("%s")
    else:
        new_d['end'] = new_end
    new_d['info'] = new_info
    pending = requests.patch(url, json=json.loads(json.dumps(new_d)), headers={'token': token})
    if pending.status_code == 204 or pending.status_code == 200:
        click.echo(click.style(f'event @{event_hex.lower()} successfully edited', fg='green'))
    elif pending.status_code == 401:
        click.echo(click.style(f'error: event @{event_hex.lower()} not found', fg='yellow'))
    elif 500 <= pending.status_code < 599:
        click.echo(click.style('server error. please report this as a bug.', fg='red'))
    elif 502 <= pending.status_code < 599:
        click.echo(click.style('please check your internet connection and try again', fg='red'))
    else:
        click.echo(click.style('something went wrong. please try again', fg='red'))

def pretty(content, range):
    p = inflect.engine()
    content = json.loads(content)
    print(f"{p.no('event', len(content))} {range}")
    for row in content:
        if row["type"] == "E":
            pointy = "->"
        elif row["type"] == "R":
            pointy = "-*"
        else:
            pointy = "-?"
        local = dt.datetime.utcfromtimestamp(int(row['start'])).replace(tzinfo=dt.timezone.utc).astimezone(tz.tzlocal())
        print(f"{row['eventhex'].lower()} {pointy} {local.strftime('%a %d %b %y')} {pointy} {local.strftime('%I:%M %p')} {row['name']}")




if __name__ == "__main__":
    try:
        token_file = open(".token.json", "r")
        token = token_file.read()
        token_file.close()
    finally:
        main()
