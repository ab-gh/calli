#!/usr/local/bin/python3
import click
import datetime as dt
import json
import requests
import printer
import bcrypt
import dateutil.parser
import os
import sys

baseurl = "https://c448e6d2-b8c6-460c-9f06-b405cfa8cb01-ide.cs50.xyz:8080/api"

token = None

@click.group()
def main():
    pass

@main.command()
def today():
    today_start = dt.datetime.now().strftime('%s')
    today_end = dt.datetime.combine((dt.datetime.today() + dt.timedelta(days=1)), dt.time(0)).strftime('%s')
    url = baseurl + "/events" + "?start=" + today_start + "&end=" + today_end
    events_today = requests.get(url, headers={'token': token})
    printer.pretty(events_today.text, "today")

@main.command()
def tomorrow():
    tomorrow_start = dt.datetime.combine((dt.datetime.today() + dt.timedelta(days=1)), dt.time(0)).strftime('%s')
    tomorrow_end = dt.datetime.combine((dt.datetime.today() + dt.timedelta(days=2)), dt.time(0)).strftime('%s')
    url = baseurl + "/events" + "?start=" + tomorrow_start + "&end=" + tomorrow_end
    events_today = requests.get(url, headers={'token': token})
    printer.pretty(events_today.text, "tomorrow")

@main.command()
def week():
    week_start = dt.datetime.now().strftime('%s')
    week_end = dt.datetime.combine((dt.datetime.today() + dt.timedelta(days=7)), dt.time(0)).strftime('%s')
    url = baseurl + "/events" + "?start=" + week_start + "&end=" + week_end
    events_today = requests.get(url, headers={'token': token})
    printer.pretty(events_today.text, "this week")

@main.command()
@click.option("--username", prompt="username")
@click.option("--password", prompt="password", hide_input=True)
def login(username, password):
    url = baseurl + "/login"
    credentials = {}
    credentials["username"] = username
    credentials["hash"] = (bcrypt.hashpw(password.encode(), bcrypt.gensalt(5))).decode()
    credentials["password"] = password
    pending = requests.post(url, json=json.loads(json.dumps(credentials)))
    if pending.status_code == 200:
        token_file = open(".token.json", "w")
        token_file.write(json.loads(pending.text))
        token_file.close()
        click.echo(click.style('successfully logged in.', fg='green'))
        click.echo(click.style('do not share your token stored in .token.json', fg='red', bold=True))
    else:
        click.echo(click.style('login failed. please try again,', fg='yellow', bold=True))

@main.command()
@click.argument("event_name", nargs=-1)
@click.option("--day", "-d", default=dt.date.today().strftime("%d/%m/%Y"), show_default=False, prompt="date", help="Date of the event")
@click.option("--start", "-t", default=dt.time(0).strftime("%-I:%M%p"), prompt="start time", help="Start time of the event", show_default=False)
@click.option("--duration", "-l", default='60', prompt="duration (minutes)", help="Duration of the event", show_default=False)
@click.option("--info", "-i", default='', prompt="information (optional)", help="Event Location", show_default=False)
def event(event_name, day, start, duration, info):
    url = baseurl + "/events"
    event_d = {"name": " ".join(event_name)}
    try:
        date = dateutil.parser.parse(day, dayfirst=True)
    except ValueError:
        click.echo(click.style('please enter a valid date', fg='red'))
    try:
        time = dateutil.parser.parse(start, dayfirst=True)
    except ValueError:
        click.echo(click.style('please enter a valid start time', fg='red'))
    start = dt.datetime.combine(date.date(), time.time())
    try:
        end = start + dt.timedelta(minutes=int(duration))
    except ValueError:
        click.echo(click.style('please enter an integer number of minutes', fg='red'))
    event_d['start'] = start.strftime("%s")
    event_d['end'] = end.strftime("%s")
    event_d['info'] = info
    event_d['type'] = 'E'
    pending = requests.post(url, json=json.loads(json.dumps(event_d)), headers={'token': token})
    if pending.status_code == 200:
        click.echo(f"-> event {json.loads(pending.text)['eventhex'].lower()} created")
    else:
        click.echo(click.style('event creation failed', fg='red'))
        click.echo(click.style('please check your network connection and retry', fg='yellow'))

@main.command()
@click.argument("remind_name", nargs=-1)
@click.option("--day", "-d", default=dt.date.today().strftime("%d/%m/%Y"), show_default=False, prompt="date", help="Date of the event")
@click.option("--start", "-t", default=dt.time(0).strftime("%-I:%M%p"), prompt="start time", help="Start time of the event", show_default=False)
@click.option("--info", "-i", default='', prompt="information (optional)", help="Event Location", show_default=False)
def remind(remind_name, day, start, info):
    url = baseurl + "/events"
    event_d = {"name": " ".join(remind_name)}
    try:
        date = dateutil.parser.parse(day, dayfirst=True)
    except ValueError:
        click.echo(click.style('please enter a valid date', fg='red'))
    try:
        time = dateutil.parser.parse(start, dayfirst=True)
    except ValueError:
        click.echo(click.style('please enter a valid start time', fg='red'))
    start = dt.datetime.combine(date.date(), time.time())
    event_d['start'] = start.strftime("%s")
    event_d['info'] = info
    event_d['type'] = 'R'
    pending = requests.post(url, json=json.loads(json.dumps(event_d)), headers={'token': token})
    if pending.status_code == 200:
        click.echo(f"-> reminder {json.loads(pending.text)['eventhex'].lower()} created")
    else:
        click.echo(click.style('reminder creation failed', fg='red'))
        click.echo(click.style('please check your network connection and retry', fg='yellow'))

@main.command()
@click.argument("event-hex", nargs=-1)
def delete(event_hex):
    url = baseurl + "/events"
    delete_a = []
    delete_d = {}
    for i in event_hex:
        if i[0] == "@" and len(i) == 7:
            delete_a.append(i)
        elif len(i) == 6:
            delete_a.append("@"+i)
        else:
            click.echo(click.style(f'{i} is not a recognised event hex', fg='red'))
            continue
    delete_d['hex'] = delete_a
    print(delete_d)
    pending = requests.delete(url, json=json.loads(json.dumps(delete_d)), headers={'token': token})
    if pending.status_code == 204:
        click.echo("events successfully deleted")
    else:
        click.echo(click.style('deletion failed', fg='red'))
        click.echo(click.style('please check that the events are valid', fg='yellow'))



if __name__ == "__main__":
    try:
        token_file = open(".token.json", "r")
        token = token_file.read()
        token_file.close()
    finally:
        main()