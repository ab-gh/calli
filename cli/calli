#!/usr/local/bin/python3
import click
import datetime as dt
import json
import requests
import printer
import bcrypt
import os
import sys

baseurl = "https://c448e6d2-b8c6-460c-9f06-b405cfa8cb01-ide.cs50.xyz:8080/api"

token = None

@click.group()
def main():
    pass

@main.command()
def today():
    url = baseurl + "/today"
    events_today = requests.get(url)
    printer.pretty(events_today.text)

@main.command()
@click.option("--username", prompt="username")
@click.option("--password", prompt="password", hide_input=True)
def login(username, password):
    url = baseurl + "/login"
    credentials = {}
    credentials["username"] = username
    credentials["hash"] = (bcrypt.hashpw(password.encode(), bcrypt.gensalt(5))).decode()
    credentials["password"] = password
    print(credentials)
    pending = requests.post(url, json=json.loads(json.dumps(credentials)))
    if pending.status_code == 200:
        token_file = open(".token.json", "w")
        token_file.write(json.loads(pending.text))
        token_file.close()
    else:
        click.echo("login failed. please try again.")

@main.command()
@click.argument("event_name", nargs=-1)
@click.option("--day", "-d", default=dt.date.today().strftime("%d/%m/%Y"), show_default=False, prompt="date (D/M/<YYYY>)", help="Date of the event")
@click.option("--start", "-t", default=dt.time(0).strftime("%-I:%M%p"), prompt="start time (HH:MMam/pm)", help="Start time of the event", show_default=False)
@click.option("--duration", "-l", default='60', prompt="duration (minutes)", help="Duration of the event", show_default=False)
@click.option("--info", "-i", default='', prompt="information (optional)", help="Event Location", show_default=False)
def event(event_name, day, start, duration, info):
    print(token)
    url = baseurl + "/new/event"
    event_d = {}
    event_d["name"] = " ".join(event_name)
    event_d["date"] = dt.datetime.strptime(day, "%d/%m/%Y").strftime("%Y-%m-%d")
    event_d["start"] = dt.datetime.strptime(start, "%I:%M%p").strftime("%H:%M")
    try:
        event_d["end"] = ((dt.datetime.combine(dt.date.today(), dt.datetime.strptime(start, "%I:%M%p").time())) + dt.timedelta(minutes=int(duration))).strftime("%H:%M")
    except:
        click.echo("Start time requires the HH:MMam/pm format")
    event_d['location'] = info
    pending = requests.post(url, json=json.loads(json.dumps(event_d)), headers={'token': token})
    if pending.status_code == 200:
        click.echo(f"Created event {event_d['name']} on {event_d['date']} at {event_d['start']} until {event_d['end']}")
    else:
        click.echo("failed")

@main.command()
@click.argument("reminder_name", nargs=-1)
@click.option("--day", "-d", default=dt.date.today().strftime("%-d/%-m/%Y"), prompt="Day", help="Date of the reminder")
@click.option("--time", "-t", default=dt.time(0).strftime("%-I:%M%P"), prompt="Time", help="Time of the reminder")
def remind(reminder_name, day, time):
    remind_d = {}
    remind_d["name"] = " ".join(reminder_name)
    remind_d["day"] = day
    remind_d["time"] = time
    json.loads(json.dumps(remind_d))
    click.echo(f"Reminder created {remind_d['name']} on {remind_d['day']} at {remind_d['time']}")

if __name__ == "__main__":
    try:
        token_file = open(".token.json", "r")
        token = token_file.read()
        token_file.close()
    finally:
        main()